#include <stdio.h> // Подключение стандартной библиотеки ввода-вывода
#include <stdlib.h> // Подключение стандартной библиотеки
#include <limits.h> // Подключение библиотеки для определения максимального значения целочисленного типа

// Функция слияния двух подмассивов
void merge(int arr[], int l, int m, int r) {
    int i, j, k; // Объявление переменных для циклов
    int n1 = m - l + 1; // Размер первого подмассива
    int n2 = r - m; // Размер второго подмассива

    // Создание временных массивов
    int L[n1 + 1], R[n2 + 1];

    // Копирование данных в временные массивы L[] и R[]
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    // Добавление "бесконечности" в конец временных массивов
    L[n1] = R[n2] = INT_MAX;

    // Слияние временных массивов обратно в arr[l..r]
    i = j = 0; // Инициализация индексов i и j для массивов L и R соответственно
    for (k = l; k <= r; k++) { // Цикл, который проходит по всем элементам от l до r
        if (L[i] <= R[j]) { // Если текущий элемент в L меньше или равен текущему элементу в R
            arr[k] = L[i]; // Записываем этот элемент в arr[k]
            i++; // Увеличиваем индекс i для следующей итерации
        }
        else { // Если текущий элемент в R меньше текущего элемента в L
            arr[k] = R[j]; // Записываем этот элемент в arr[k]
            j++; // Увеличиваем индекс j для следующей итерации
        }
    }

}
// Рекурсивная функция сортировки слиянием
void cycleMergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2; // Вычисление середины

        // Рекурсивный вызов для первой и второй половин
        cycleMergeSort(arr, l, m);
        cycleMergeSort(arr, m + 1, r);

        // Слияние отсортированных половин
        merge(arr, l, m, r);
    }
}

// Функция для печати массива размера n
void printArray(int A[], int size) {
    for (int i = 0; i < size; i++)
        printf("%d ", A[i]); // Печать каждого элемента массива
    printf("\n"); // Переход на новую строку
}

// Главная функция
int main() {

    int arr[] = { 2, 11, 113, 52, -1, 5 }; // Исходный массив
    int arr_size = sizeof(arr) / sizeof(arr[0]); // Размер массива

    printf("Исходный массив:\n");
    printArray(arr, arr_size); // Печать исходного массива

    cycleMergeSort(arr, 0, arr_size - 1); // Сортировка массива

    printf("\nОтсортированный массив:\n");
    printArray(arr, arr_size); // Печать отсортированного массива

    return 0; // Возврат 0, если программа завершилась успешно
}